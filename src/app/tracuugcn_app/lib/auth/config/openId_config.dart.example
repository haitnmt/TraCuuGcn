import 'package:flutter/foundation.dart';
import '../utils/platform_detector.dart';

/// OpenID Connect Configuration Examples for Different Platforms
/// 
/// This file contains example configurations for various OpenID Connect providers
/// and how to configure them for different platforms (Android, iOS, Web, Desktop)
/// 
/// To use: Copy this file to openId_config.dart and update with your actual values

// MARK: - Base Configuration Class
class OpenIdConfig {
  final String issuer;
  final String clientId;
  final String? clientSecret;
  final List<String> scopes;
  final String redirectUri;
  final String? postLogoutRedirectUri;
  final Map<String, String>? additionalParameters;
  final bool allowInsecureConnections;
  final Map<String, dynamic>? platformSpecificConfig;

  const OpenIdConfig({
    required this.issuer,
    required this.clientId,
    this.clientSecret,
    required this.scopes,
    required this.redirectUri,
    this.postLogoutRedirectUri,
    this.additionalParameters,
    this.allowInsecureConnections = false,
    this.platformSpecificConfig,
  });

  Map<String, dynamic> toJson() {
    return {
      'issuer': issuer,
      'clientId': clientId,
      'clientSecret': clientSecret,
      'scopes': scopes,
      'redirectUri': redirectUri,
      'postLogoutRedirectUri': postLogoutRedirectUri,
      'additionalParameters': additionalParameters,
      'allowInsecureConnections': allowInsecureConnections,
      'platformSpecificConfig': platformSpecificConfig,
    };
  }
}

// MARK: - Platform Detection
class PlatformConfig {
  static const String android = 'android';
  static const String ios = 'ios';
  static const String web = 'web';
  static const String macos = 'macos';
  static const String windows = 'windows';
  static const String linux = 'linux';
}

// MARK: - Keycloak Configuration Examples
class KeycloakConfigs {
  // Development Environment
  static OpenIdConfig development({required String platform}) {
    final baseRedirectUri = _getRedirectUri('dev', platform);
    
    return OpenIdConfig(
      issuer: 'https://your-keycloak-dev.example.com/realms/your-realm',
      clientId: 'tracuugcn-app-dev',
      clientSecret: platform == PlatformConfig.web ? 'your-client-secret-dev' : null,
      scopes: ['openid', 'profile', 'email', 'roles'],
      redirectUri: baseRedirectUri,
      postLogoutRedirectUri: _getPostLogoutRedirectUri('dev', platform),
      additionalParameters: {
        'kc_idp_hint': 'internal', // Optional: specify identity provider
        'login_hint': '', // Optional: pre-fill username
      },
      allowInsecureConnections: true, // Only for development
      platformSpecificConfig: _getPlatformSpecificConfig(platform),
    );
  }

  // Production Environment
  static OpenIdConfig production({required String platform}) {
    final baseRedirectUri = _getRedirectUri('prod', platform);
    
    return OpenIdConfig(
      issuer: 'https://auth.yourdomain.com/realms/tracuugcn',
      clientId: 'tracuugcn-app',
      clientSecret: platform == PlatformConfig.web ? 'your-client-secret-prod' : null,
      scopes: ['openid', 'profile', 'email', 'roles', 'offline_access'],
      redirectUri: baseRedirectUri,
      postLogoutRedirectUri: _getPostLogoutRedirectUri('prod', platform),
      additionalParameters: {
        'response_mode': 'query',
        'prompt': 'login',
      },
      allowInsecureConnections: false,
      platformSpecificConfig: _getPlatformSpecificConfig(platform),
    );
  }

  // Self-hosted Keycloak (Local Development)
  static OpenIdConfig localhost({required String platform}) {
    final baseRedirectUri = _getRedirectUri('local', platform);
    
    return OpenIdConfig(
      issuer: 'http://localhost:8080/realms/tracuugcn',
      clientId: 'tracuugcn-app-local',
      scopes: ['openid', 'profile', 'email'],
      redirectUri: baseRedirectUri,
      postLogoutRedirectUri: _getPostLogoutRedirectUri('local', platform),
      allowInsecureConnections: true,
      platformSpecificConfig: _getPlatformSpecificConfig(platform),
    );
  }

  static String _getRedirectUri(String env, String platform) {
    switch (platform) {
      case PlatformConfig.android:
        return 'com.example.tracuugcn.$env://oauth/callback';
      case PlatformConfig.ios:
        return 'com.example.tracuugcn.$env://oauth/callback';
      case PlatformConfig.web:
        switch (env) {
          case 'dev':
            return 'http://localhost:3000/auth/callback';
          case 'prod':
            return 'https://tracuugcn.yourdomain.com/auth/callback';
          case 'local':
            return 'http://localhost:3000/auth/callback';
          default:
            return 'http://localhost:3000/auth/callback';
        }
      case PlatformConfig.macos:
      case PlatformConfig.windows:
      case PlatformConfig.linux:
        return 'http://localhost:8080/auth/callback';
      default:
        return 'http://localhost:8080/auth/callback';
    }
  }

  static String _getPostLogoutRedirectUri(String env, String platform) {
    switch (platform) {
      case PlatformConfig.android:
      case PlatformConfig.ios:
        return 'com.example.tracuugcn.$env://logout/callback';
      case PlatformConfig.web:
        switch (env) {
          case 'dev':
            return 'http://localhost:3000/';
          case 'prod':
            return 'https://tracuugcn.yourdomain.com/';
          case 'local':
            return 'http://localhost:3000/';
          default:
            return 'http://localhost:3000/';
        }
      default:
        return 'http://localhost:8080/';
    }
  }

  static Map<String, dynamic> _getPlatformSpecificConfig(String platform) {
    switch (platform) {
      case PlatformConfig.android:
        return {
          'browser_type': 'chrome_custom_tabs',
          'use_webview': false,
          'package_name': 'com.example.tracuugcn',
        };
      case PlatformConfig.ios:
        return {
          'browser_type': 'safari_view_controller',
          'use_webview': false,
          'bundle_id': 'com.example.tracuugcn',
        };
      case PlatformConfig.web:
        return {
          'popup_mode': false,
          'silent_renew': true,
          'automatic_silent_renew': true,
        };
      case PlatformConfig.macos:
      case PlatformConfig.windows:
      case PlatformConfig.linux:
        return {
          'use_system_browser': true,
          'local_port': 8080,
        };
      default:
        return {};
    }
  }
}

// MARK: - Azure AD Configuration Examples
class AzureAdConfigs {
  static OpenIdConfig enterprise({required String platform}) {
    final baseRedirectUri = _getAzureRedirectUri(platform);
    
    return OpenIdConfig(
      issuer: 'https://login.microsoftonline.com/YOUR_TENANT_ID/v2.0',
      clientId: 'your-azure-client-id',
      scopes: ['openid', 'profile', 'email', 'User.Read'],
      redirectUri: baseRedirectUri,
      postLogoutRedirectUri: _getAzurePostLogoutUri(platform),
      additionalParameters: {
        'response_type': 'code',
        'response_mode': 'query',
        'prompt': 'select_account',
      },
      platformSpecificConfig: KeycloakConfigs._getPlatformSpecificConfig(platform),
    );
  }

  static OpenIdConfig multiTenant({required String platform}) {
    return OpenIdConfig(
      issuer: 'https://login.microsoftonline.com/common/v2.0',
      clientId: 'your-azure-client-id',
      scopes: ['openid', 'profile', 'email'],
      redirectUri: _getAzureRedirectUri(platform),
      postLogoutRedirectUri: _getAzurePostLogoutUri(platform),
      additionalParameters: {
        'response_type': 'code',
        'prompt': 'login',
      },
      platformSpecificConfig: KeycloakConfigs._getPlatformSpecificConfig(platform),
    );
  }

  static String _getAzureRedirectUri(String platform) {
    switch (platform) {
      case PlatformConfig.android:
        return 'msauth://com.example.tracuugcn/YOUR_SIGNATURE_HASH';
      case PlatformConfig.ios:
        return 'msauth.com.example.tracuugcn://auth';
      case PlatformConfig.web:
        return 'https://tracuugcn.yourdomain.com/auth/azure/callback';
      default:
        return 'http://localhost:8080/auth/azure/callback';
    }
  }

  static String _getAzurePostLogoutUri(String platform) {
    switch (platform) {
      case PlatformConfig.web:
        return 'https://tracuugcn.yourdomain.com/';
      default:
        return 'http://localhost:8080/';
    }
  }
}

// MARK: - Google OAuth Configuration Examples
class GoogleOAuthConfigs {
  static OpenIdConfig standard({required String platform}) {
    return OpenIdConfig(
      issuer: 'https://accounts.google.com',
      clientId: _getGoogleClientId(platform),
      scopes: ['openid', 'profile', 'email'],
      redirectUri: _getGoogleRedirectUri(platform),
      additionalParameters: {
        'access_type': 'offline',
        'include_granted_scopes': 'true',
      },
      platformSpecificConfig: KeycloakConfigs._getPlatformSpecificConfig(platform),
    );
  }

  static String _getGoogleClientId(String platform) {
    switch (platform) {
      case PlatformConfig.android:
        return 'your-android-client-id.apps.googleusercontent.com';
      case PlatformConfig.ios:
        return 'your-ios-client-id.apps.googleusercontent.com';
      case PlatformConfig.web:
        return 'your-web-client-id.apps.googleusercontent.com';
      default:
        return 'your-desktop-client-id.apps.googleusercontent.com';
    }
  }

  static String _getGoogleRedirectUri(String platform) {
    switch (platform) {
      case PlatformConfig.android:
        return 'com.example.tracuugcn:/oauth2redirect';
      case PlatformConfig.ios:
        return 'com.example.tracuugcn:/oauth2redirect';
      case PlatformConfig.web:
        return 'https://tracuugcn.yourdomain.com/auth/google/callback';
      default:
        return 'http://localhost:8080/auth/google/callback';
    }
  }
}

// MARK: - Generic OIDC Provider Configuration
class GenericOidcConfigs {
  static OpenIdConfig custom({
    required String issuer,
    required String clientId,
    String? clientSecret,
    required String platform,
    List<String>? customScopes,
    Map<String, String>? customParameters,
  }) {
    return OpenIdConfig(
      issuer: issuer,
      clientId: clientId,
      clientSecret: clientSecret,
      scopes: customScopes ?? ['openid', 'profile', 'email'],
      redirectUri: _getCustomRedirectUri(platform),
      postLogoutRedirectUri: _getCustomPostLogoutUri(platform),
      additionalParameters: customParameters,
      platformSpecificConfig: KeycloakConfigs._getPlatformSpecificConfig(platform),
    );
  }

  static String _getCustomRedirectUri(String platform) {
    switch (platform) {
      case PlatformConfig.android:
      case PlatformConfig.ios:
        return 'com.example.tracuugcn://oauth/callback';
      case PlatformConfig.web:
        return 'https://tracuugcn.yourdomain.com/auth/callback';
      default:
        return 'http://localhost:8080/auth/callback';
    }
  }

  static String _getCustomPostLogoutUri(String platform) {
    switch (platform) {
      case PlatformConfig.web:
        return 'https://tracuugcn.yourdomain.com/';
      default:
        return 'http://localhost:8080/';
    }
  }
}

// MARK: - Configuration Factory
class OpenIdConfigFactory {
  static OpenIdConfig getConfig({
    required String provider,
    required String environment,
    required String platform,
    Map<String, dynamic>? customConfig,
  }) {
    switch (provider.toLowerCase()) {
      case 'keycloak':
        switch (environment.toLowerCase()) {
          case 'development':
          case 'dev':
            return KeycloakConfigs.development(platform: platform);
          case 'production':
          case 'prod':
            return KeycloakConfigs.production(platform: platform);
          case 'localhost':
          case 'local':
            return KeycloakConfigs.localhost(platform: platform);
          default:
            return KeycloakConfigs.development(platform: platform);
        }
      case 'azure':
      case 'azuread':
        switch (environment.toLowerCase()) {
          case 'enterprise':
            return AzureAdConfigs.enterprise(platform: platform);
          case 'multitenant':
            return AzureAdConfigs.multiTenant(platform: platform);
          default:
            return AzureAdConfigs.enterprise(platform: platform);
        }
      case 'google':
        return GoogleOAuthConfigs.standard(platform: platform);
      case 'custom':
        if (customConfig != null) {
          return GenericOidcConfigs.custom(
            issuer: customConfig['issuer'] ?? '',
            clientId: customConfig['clientId'] ?? '',
            clientSecret: customConfig['clientSecret'],
            platform: platform,
            customScopes: customConfig['scopes']?.cast<String>(),
            customParameters: customConfig['additionalParameters']?.cast<String, String>(),
          );
        }
        throw ArgumentError('Custom config requires customConfig parameter');
      default:
        throw ArgumentError('Unsupported provider: $provider');
    }
  }
}

// MARK: - Auto-Configuration Helper
class AutoOpenIdConfig {
  /// Automatically configure OpenID based on current platform and environment
  static OpenIdConfig auto({
    required String provider,
    String? environment,
    Map<String, dynamic>? customConfig,
  }) {
    final currentPlatform = PlatformDetector.getCurrentPlatform();
    final env = environment ?? (kDebugMode ? 'development' : 'production');
    
    return OpenIdConfigFactory.getConfig(
      provider: provider,
      environment: env,
      platform: currentPlatform,
      customConfig: customConfig,
    );
  }

  /// Get configuration with platform-specific optimizations
  static OpenIdConfig optimized({
    required String provider,
    String? environment,
    Map<String, dynamic>? customConfig,
  }) {
    final config = auto(
      provider: provider,
      environment: environment,
      customConfig: customConfig,
    );
    
    // Apply platform-specific optimizations
    final platformPrefs = PlatformDetector.getAuthFlowPreferences();
    final securityReqs = PlatformDetector.getSecurityRequirements();
    
    final optimizedConfig = {
      ...config.platformSpecificConfig ?? {},
      ...platformPrefs,
      'security_requirements': securityReqs,
    };
    
    return OpenIdConfig(
      issuer: config.issuer,
      clientId: config.clientId,
      clientSecret: config.clientSecret,
      scopes: config.scopes,
      redirectUri: config.redirectUri,
      postLogoutRedirectUri: config.postLogoutRedirectUri,
      additionalParameters: config.additionalParameters,
      allowInsecureConnections: config.allowInsecureConnections,
      platformSpecificConfig: optimizedConfig,
    );
  }
}

// MARK: - Usage Examples and Instructions

/// USAGE EXAMPLES:
/// 
/// 1. Keycloak Development:
/// ```dart
/// final config = OpenIdConfigFactory.getConfig(
///   provider: 'keycloak',
///   environment: 'development',
///   platform: PlatformConfig.android,
/// );
/// ```
/// 
/// 2. Azure AD Enterprise:
/// ```dart
/// final config = OpenIdConfigFactory.getConfig(
///   provider: 'azure',
///   environment: 'enterprise',
///   platform: PlatformConfig.web,
/// );
/// ```
/// 
/// 3. Google OAuth:
/// ```dart
/// final config = OpenIdConfigFactory.getConfig(
///   provider: 'google',
///   environment: 'production',
///   platform: PlatformConfig.ios,
/// );
/// ```
/// 
/// 4. Custom Provider:
/// ```dart
/// final config = OpenIdConfigFactory.getConfig(
///   provider: 'custom',
///   environment: 'production',
///   platform: PlatformConfig.web,
///   customConfig: {
///     'issuer': 'https://your-custom-provider.com',
///     'clientId': 'your-client-id',
///     'scopes': ['openid', 'profile', 'custom-scope'],
///   },
/// );
/// ```
/// 
/// 5. Automatic platform detection:
/// ```dart
/// final config = AutoOpenIdConfig.auto(provider: 'keycloak');
/// ```
/// 
/// 6. Optimized configuration:
/// ```dart
/// final config = AutoOpenIdConfig.optimized(
///   provider: 'keycloak',
///   environment: 'production',
/// );
/// ```
/// 
/// 7. Platform detection in custom logic:
/// ```dart
/// final platform = PlatformDetector.getCurrentPlatform();
/// if (platform.isMobile) {
///   // Mobile-specific logic
/// } else if (platform.isWeb) {
///   // Web-specific logic
/// }
/// ```
/// 
/// 8. Debug platform information:
/// ```dart
/// final debugInfo = PlatformDetector.getDebugInfo();
/// print('Platform info: $debugInfo');
/// ```

// MARK: - Platform-Specific Setup Instructions

/// ANDROID SETUP:
/// 1. Add to android/app/src/main/AndroidManifest.xml:
/// ```xml
/// <activity
///     android:name="net.openid.appauth.RedirectUriReceiverActivity"
///     android:exported="true">
///     <intent-filter>
///         <action android:name="android.intent.action.VIEW" />
///         <category android:name="android.intent.category.DEFAULT" />
///         <category android:name="android.intent.category.BROWSABLE" />
///         <data android:scheme="com.example.tracuugcn.dev" />
///     </intent-filter>
/// </activity>
/// ```
/// 
/// 2. Add to android/app/build.gradle:
/// ```gradle
/// android {
///     defaultConfig {
///         manifestPlaceholders = [
///             'appAuthRedirectScheme': 'com.example.tracuugcn.dev'
///         ]
///     }
/// }
/// ```

/// IOS SETUP:
/// 1. Add to ios/Runner/Info.plist:
/// ```xml
/// <key>CFBundleURLTypes</key>
/// <array>
///     <dict>
///         <key>CFBundleURLName</key>
///         <string>com.example.tracuugcn.oauth</string>
///         <key>CFBundleURLSchemes</key>
///         <array>
///             <string>com.example.tracuugcn.dev</string>
///         </array>
///     </dict>
/// </array>
/// ```

/// WEB SETUP:
/// 1. Ensure your web server can serve the redirect URIs
/// 2. Configure CORS settings on your OIDC provider
/// 3. Add the web redirect URIs to your OIDC client configuration

/// DESKTOP SETUP:
/// 1. Ensure the local HTTP server can bind to the specified port
/// 2. Configure firewall to allow the local server
/// 3. Add desktop redirect URIs to your OIDC client configuration

// MARK: - Security Considerations

/// SECURITY BEST PRACTICES:
/// 
/// 1. Always use HTTPS in production (except for localhost)
/// 2. Use client secrets only for web applications, not mobile/desktop
/// 3. Implement proper token storage (secure storage for mobile, secure cookies for web)
/// 4. Use PKCE (Proof Key for Code Exchange) for public clients
/// 5. Implement proper token refresh logic
/// 6. Validate SSL certificates (don't allow insecure connections in production)
/// 7. Use appropriate scopes - request only what you need
/// 8. Implement proper session management and logout
/// 9. Consider implementing token introspection for additional security
/// 10. Keep client secrets secure and rotate them regularly

// MARK: - Troubleshooting

/// COMMON ISSUES AND SOLUTIONS:
/// 
/// 1. Redirect URI mismatch:
///    - Ensure the redirect URI in your config matches exactly with the one configured in your OIDC provider
///    - Check for trailing slashes, case sensitivity, and URL encoding
/// 
/// 2. CORS issues (Web):
///    - Configure your OIDC provider to allow your web domain
///    - Check that both the origin and redirect URIs are whitelisted
/// 
/// 3. SSL/TLS issues:
///    - Use proper SSL certificates in production
///    - For development, you may need to allow insecure connections
/// 
/// 4. Token expiration:
///    - Implement proper token refresh logic
///    - Check token expiration times and refresh before expiry
/// 
/// 5. Scope issues:
///    - Ensure requested scopes are supported by your OIDC provider
///    - Check that your client has permission for the requested scopes
/// 
/// 6. Platform-specific issues:
///    - Android: Check app signing and package name
///    - iOS: Verify bundle ID and URL scheme configuration
///    - Desktop: Ensure local server can bind to the specified port

